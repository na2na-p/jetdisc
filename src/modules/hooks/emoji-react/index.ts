import { boundMethod } from 'autobind-decorator';
import { Message } from 'discord.js';
import { parse } from 'twemoji-parser';

import type { queryMessage } from '@/types/types.js';
import { Module } from '@/types/modules.js';
import { Na2Client } from '@/client.js';

type wordReactType = Array<[RegExp, string]>;

/**
 * EmojiReact module
 */
export class EmojiReact extends Module {
	public override readonly name = 'EmojiReact';

	@boundMethod
	public install() {
		return {
			streamHook: this.streamHook,
		};
	}

	@boundMethod
	private async streamHook(message: Readonly<Message<boolean>>, query: queryMessage): Promise<boolean> {
		if (await this.mimicking(message, query)) {
			return true;
		}
		if (this.wordReact(message)) {
			return true;
		}
		return false;
	}

	@boundMethod
	private async mimicking(message: Readonly<Message<boolean>>, query: queryMessage): Promise<boolean> {
		const emojis = parse(query.queryContent).map((x) => x.text);
		// "<:"„Åã„ÇâÂßã„Åæ„Å£„Å¶">"„ÅßÁµÇ„Çè„Çã„ÇÇ„ÅÆ„ÇíÊäΩÂá∫
		const customEmojisRegEx = /<:.[^>]*:\d+>/g;
		// customEmojis„Å´ËøΩÂä†
		const customEmojis: string[] = query.queryContent.match(customEmojisRegEx) || [];

		// const customEmojisIds: string[] = (() => {
		// 	if (customEmojis.length > 0) {
		// 		// ":"„Åã„Çâ">"„ÅÆÈñì„Å´„ÅÇ„ÇãÊï∞Â≠ó„Å†„Åë„ÇíÊäΩÂá∫
		// 		return customEmojis.map((x) => x.match(/\d+/g)![0]);
		// 	}
		// 	return [];
		// })();

		emojis.concat(customEmojis).forEach(async (emoji) => {
			try {
				await message.react(emoji);
			} catch (error) {
				await message.react(`‚ù§Ô∏è`);
			}
		});
		if (emojis.concat(customEmojis).length === 0) {
			return false;
		}
		switch (emojis.length) {
		case 0:
			break;
		case 1:
			Na2Client.log(`Emoji detected - ${emojis}`);
			break;
		default:
			Na2Client.log(`Emojis detected - ${emojis}`);
			break;
		}

		switch (customEmojis.length) {
		case 0:
			break;
		case 1:
			Na2Client.log(`Custom Emoji detected - ${customEmojis}`);
			break;
		default:
			Na2Client.log(`Custom Emojis detected - ${customEmojis}`);
			break;
		}

		return true;
	}

	@boundMethod
	private wordReact(message: Readonly<Message<boolean>>): boolean {
		const words: wordReactType = [
			[/(ËÇâ|„Å´„Åè)/, 'üçó'],
			[/(ÂØøÂè∏|„Åô„Åó)/, 'üç£'],
			[/(„É©„Éº„É°„É≥)/, 'üçú'],
			[/(„Éî„Ç∂)/, 'üçï'],
			[/(„Ç´„É¨„Éº)/, 'üçõ'],
			[/(„ÅäËèìÂ≠ê)/, 'üç¨'],
			[/(„Åä„Å°„ÇÉ)/, 'üçµ'],
		];

		const isReacted: boolean = (() => {
			let hit = false;
			// wordsÂÖ®„Å¶Ë©¶Ë°å„Åô„Çã„Åæ„Åßreturn„Åó„Å™„ÅÑ
			// „Å§„Åæ„Çä„ÄÅË§áÊï∞„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåÂèØËÉΩ„ÄÇ„Åì„ÅÆÂ†¥Âêà„Åßlet‰Ωø„Çè„Åö„Å´‰Ωï„Å®„Åã„Åô„ÇãÊñπÊ≥ï„Å™„ÅÑ„Åã„Åó„Çâ„ÄÇ
			words.forEach(([word, emoji]) => {
				if (word.exec(message.content)) {
					message.react(emoji);
					hit = true;
				};
			});
			return hit;
		})();

		return isReacted;
	}
};
